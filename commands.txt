
#run docker-compose (instance of node)

NODE_ID='node-1' NODE_LOCAL_IP='localhost:8080' NODE_ENDPOINT=':4556' docker compose -p node_1 up -d

NODE_ID='node-2' NODE_LOCAL_IP='localhost:8081' NODE_ENDPOINT=':4557' docker compose -p node_2 up -d

#run dtn-node
# - The node core container uses the 'host'. This is to avoid complexity in implementing the mechanism of 'discovering' nodes. 
# 	The library dtn7-go comes with its own automatic 'discovery' of nodes mechanism, using a multicast network. //To see the address search for file 0doc.go

# 	Implementing a mechanism of 'discovery' (as may real-life DTN nodes would work) may take some time, 
#	and currently, the tight schedule isn't enabling that to the prototype.

docker run --name node1 --network=host -e NODE_ID='node-1' -e NODE_LOCAL_IP='localhost:8080' -e NODE_ENDPOINT=':4556' -t dtn-base:1.0.0 

#run dtn-node (node 2 for develop purposes)
docker run --name node2 --network=host -e NODE_ID='node-2' -e NODE_LOCAL_IP='localhost:8081' -e NODE_ENDPOINT=':4557' -t dtn-base:1.0.0 

#run dtn-node (node 3 for develop purposes)
docker run --name node3 --network=host -e NODE_ID='node-3' -e NODE_LOCAL_IP='localhost:8082' -e NODE_ENDPOINT=':4558' -t dtn-base:1.0.0 




#run dtn-agent-server

docker run --name node1-agent --network=host -e NODE_ID='node-1' -e NODE_LOCAL_IP='127.0.0.1:8085' -e NODE_ENDPOINT=':4556' -t dtn-agent:1.0.0 

#run dtn-agent-server for node2
docker run --name node2-agent --network=host -e NODE_ID='node-2' -e NODE_LOCAL_IP='localhost:8081' -e NODE_ENDPOINT=':4557' -t dtn-agent:1.0.0 

#run dtn-agent-server for node3
docker run --name node3-agent --network=host -e NODE_ID='node-3' -e NODE_LOCAL_IP='localhost:8082' -e NODE_ENDPOINT=':4558' -t dtn-agent:1.0.0 



// address4 is the default multicast IPv4 address used for discovery.
	address4 = "224.23.23.23"

// address6 is the default multicast IPv4 add6ess used for discovery.
address6 = "ff02::23"

	// port is the default multicast UDP port used for discovery.
	port = 35039

#send udp package to default multicast address
echo "Hello, multicast!" | socat - UDP-DATAGRAM:224.23.23.23:35039

#hear discovery
sudo tcpdump -i ens33 -n udp and port 35039 and host 224.23.23.23



----
################NOT BEING USED######################


NETWORK ATTACHMENT DEFINITION


cat ./deployments/multus-daemonset-thick.yml | kubectl apply -f -

cat <<EOF | kubectl create -f -
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: macvlan-conf
spec:
  config: '{
            "cniVersion": "0.3.0",
            "type": "macvlan",
            "master": "eth0",
            "mode": "bridge",
            "ipam": {
                "type": "host-local",
                "ranges": [
                    [ {
                         "subnet": "192.168.1.0/24",
		         "rangeStart": "192.168.1.200",
		         "rangeEnd": "192.168.1.216",
                         "gateway": "192.168.1.1"
                    } ]
                ],
                "routes": [
                    {"dst": "224.23.23.23/32", "gw": "192.168.1.1"}
                ],
                "dataDir": "/run/multus",
                "rangeID": 0,
                "multicastGroups": [
                    {"group": "224.23.23.23", "port": 35039}
                ]
            }
        }'
EOF
----

DOCKER LOCAL REGISTRY, NOT NEEDING TO PUSH IMAGES TO A OUTSIDE REGISTRY

eval $(minikube docker-env)

-- Please follow the 2nd answer on the thread

https://stackoverflow.com/questions/36874880/kubernetes-cannot-pull-local-image





